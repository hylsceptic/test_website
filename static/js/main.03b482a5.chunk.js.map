{"version":3,"sources":["components/Mint.js","components/View.js","components/Transfer.js","components/CountDown.js","App.js","reportWebVitals.js","index.js"],"names":["Mint","total","minted","data_url","image_url","free_sup","useState","cnt","setCnt","provider","ethers","providers","Web3Provider","window","ethereum","address","data","abi","className","type","value","onInput","e","target","onClick","send","then","signer","getSigner","kitties","Contract","connect","overrides","utils","parseEther","toString","mint","catch","err","alert","message","useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","padding","width","View","show_my_kitties","show_all_kitties","classes","length","ImageList","cols","rowHeight","gap","map","tile","ImageListItem","src","ImageListItemBar","title","Transfer","idx","setIdx","to_address","setToAddress","transferFrom","selectedAddress","CountDown","start_height","current_heght","setCurrentHeight","getBlockNumber","res","toFixed","App","setKitties","setTotal","setMinted","setFreeSup","setStartHeight","setDataUrl","setImageUrl","kitties_contract","useEffect","a","enable","walletOfOwner","toNumber","totalSupply","getFreeSupply","getBaseURI","getSaleTime","base_url","fetch","substring","json","image","MAX_KITTIES","initData","all_kitties","i","push","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"g15EAkDeA,MA3Cf,YAA+D,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,OAAQC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,UAAWC,EAAW,EAAXA,SAC/C,EAAsBC,mBAAS,GAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACMC,EAAW,IAAIC,IAAOC,UAAUC,aAAaC,OAAOC,UACpDC,EAAUC,EAAKD,QACfE,EAAMD,EAAKC,IAkBjB,OACI,sBAAKC,UAAU,OAAf,UACI,6CACA,oDAAuBhB,EAAvB,MAAkCG,EAAlC,MAA+CJ,EAA/C,OACA,+CAAkBE,KAClB,4CAAeC,KACf,mDAAsBY,EAAKD,WAC3B,gCACI,+CACA,uCACA,uBAAOI,KAAK,OAAOC,MAAOb,EAAKc,QAAU,SAAAC,GAAC,OAAId,EAAOc,EAAEC,OAAOH,UAC9D,uBACAD,KAAK,SACLC,MAAM,OACNI,QA9BG,WACC,IAARjB,GACJE,EAASgB,KAAK,sBAAuB,IAAIC,MAAK,WAE1C,IAAMC,EAASlB,EAASmB,YACpBC,EAAU,IAAInB,IAAOoB,SAASf,EAASE,GAC3CY,EAAUA,EAAQE,QAAQJ,GAC1B,IACIK,EAAY,CACZZ,MAAOV,IAAOuB,MAAMC,YAFZ,IAEwB3B,GAAa4B,aAEjDN,EAAQO,KAAK7B,EAAKyB,GAAWK,OAAM,SAACC,GAAD,OAASC,MAAMD,EAAIE,yB,oCCjB5DC,G,MAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACJC,QAAS,OACTC,SAAU,OACVC,eAAgB,eAChBC,SAAU,SACVC,gBAAiBN,EAAMO,QAAQC,WAAWC,OAE5CC,SAAU,CACRC,QAAS,GACTC,MAAO,UAwCEC,MApCf,YAAwE,IAAzD3B,EAAwD,EAAxDA,QAAS4B,EAA+C,EAA/CA,gBAAiBC,EAA8B,EAA9BA,iBAE/BC,GAF6D,EAAZvD,UAEvCqC,KAChB,OACI,sBAAKvB,UAAU,OAAf,UACE,+CACA,gCACE,uBACMC,KAAK,SACLC,MAAM,aACNI,QAASiC,IAGf,uBACMtC,KAAK,SACLC,MAAM,cACNI,QAASkC,OAGjB,4BAAuB,IAAnB7B,EAAQ+B,OAAe,qCAAuC,KAClE,qBAAK1C,UAAWyC,EAAQf,KAAxB,SACE,cAACiB,EAAA,EAAD,CAAWC,KAAM,EAAGC,UAAW,IAAMC,IAAK,GAAI9C,UAAWyC,EAAQN,SAAjE,SACGxB,EAAQoC,KAAI,SAACC,GAAD,OACX,eAACC,EAAA,EAAD,WACE,qBAAKC,IAAK,mEAA0EF,EAAK/B,WAAa,SACtG,cAACkC,EAAA,EAAD,CACEC,MAAO,YAAcJ,EAAK/B,eAHV+B,c,MCHrBK,MAnCf,WACI,MAAsBjE,mBAAS,GAA/B,mBAAOkE,EAAP,KAAYC,EAAZ,KACA,EAAmCnE,mBAAS,IAA5C,mBAAOoE,EAAP,KAAmBC,EAAnB,KAiBA,OACI,sBAAKzD,UAAU,WAAf,UACI,iDACA,0CACA,uBAAOC,KAAK,MAAMC,MAAOsD,EAAYrD,QAAU,SAAAC,GAAC,OAAIqD,EAAarD,EAAEC,OAAOH,UAC1E,0CACA,uBAAOD,KAAK,MAAMC,MAAOoD,EAAKnD,QAAU,SAAAC,GAAC,OAAImD,EAAOnD,EAAEC,OAAOH,UAC7D,uBACAD,KAAK,SACLC,MAAM,WACNI,QAxBO,WACX,IAAMf,EAAW,IAAIC,IAAOC,UAAUC,aAAaC,OAAOC,UACpDC,EAAUC,EAAKD,QACfE,EAAMD,EAAKC,IACjBR,EAASgB,KAAK,sBAAuB,IAAIC,MAAK,WAE1C,IAAMC,EAASlB,EAASmB,YACpBC,EAAU,IAAInB,IAAOoB,SAASf,EAASE,IAC3CY,EAAUA,EAAQE,QAAQJ,IAClBiD,aAAa/D,OAAOC,SAAS+D,gBAAiBH,EAAYF,GAAKnC,OAAM,SAACC,GAAD,OAASC,MAAMD,EAAIE,sB,MCI7FsC,MAnBf,YAAoC,IAAhBC,EAAe,EAAfA,aAChB,EAAwCzE,mBAAS,GAAjD,mBAAK0E,EAAL,KAAoBC,EAApB,KAGA,OAFiB,IAAIvE,IAAOC,UAAUC,aAAaC,OAAOC,UACjDoE,iBAAiBxD,MAAK,SAACyD,GAASF,EAAiBE,MACtDJ,EAAeC,EAEX,sBAAK9D,UAAU,YAAf,UACI,6CACA,8BAAI6D,EAAeC,EAAnB,iCAAgED,EAAeC,GAAiB,GAAGI,QAAQ,GAA3G,iBAMJ,yBC6DGC,MAvEf,WACI,MAA8B/E,mBAAS,IAAvC,mBAAOuB,EAAP,KAAgByD,EAAhB,KACA,EAA0BhF,mBAAS,GAAnC,mBAAOL,EAAP,KAAcsF,EAAd,KACA,EAA4BjF,mBAAS,GAArC,mBAAOJ,EAAP,KAAesF,EAAf,KACA,EAA+BlF,mBAAS,GAAxC,mBAAOD,EAAP,KAAiBoF,EAAjB,KACA,EAAuCnF,mBAAS,GAAhD,mBAAOyE,EAAP,KAAqBW,EAArB,KACA,EAA+BpF,mBAAS,IAAxC,mBAAOH,EAAP,KAAiBwF,EAAjB,KACA,EAAiCrF,mBAAS,IAA1C,mBAAOF,EAAP,KAAkBwF,EAAlB,KACMnF,EAAW,IAAIC,IAAOC,UAAUC,aAAaC,OAAOC,UACpDC,EAAUC,EAAKD,QACfE,EAAMD,EAAKC,IACb4E,EAAmB,IAAInF,IAAOoB,SAASf,EAASE,EAAKR,GAqC3D,OAnCEqF,qBAAU,YACM,uCAAG,8BAAAC,EAAA,sEACTlF,OAAOC,SAASkF,SADP,cAEfH,EAAiBI,cAAcpF,OAAOC,SAAS+D,iBAAiBnD,MAAK,SAACyD,GAClEA,EAAMA,EAAIlB,KAAI,SAACO,GAAS,OAAOA,EAAI0B,cACnCZ,EAAWH,MAJA,KAMbK,EANa,SAMIK,EAAiBM,cANrB,0BAMoCD,YANpC,mBAObT,EAPa,UAOKI,EAAiBO,gBAPtB,2BAOuCF,YAPvC,mBAQbP,EARa,UAQIE,EAAiBQ,aARrB,+CASbX,EATa,UASQG,EAAiBS,cATzB,oDAUQT,EAAiBQ,aAVzB,eAUTE,EAVS,OAWbZ,EAAWY,GAXE,UAYIC,MAAM,uBAAyBD,EAASE,UAAU,GAAK,KAAK/E,MAAK,SAACyD,GAAD,OAASA,EAAIuB,UAZlF,eAYT1F,EAZS,OAab4E,EAAY5E,EAAK2F,MAAMF,UAAU,EAAGzF,EAAK2F,MAAM/C,OAAS,IAb3C,KAcb2B,EAda,UAcGM,EAAiBe,cAdpB,oBAcmCV,YAdnC,0DAAH,qDAiBdW,KACC,IAiBH,gCACA,oCACE,cAAC,EAAD,CAAW9B,aAAcA,MAE3B,oCACE,cAAC,EAAD,CACE9E,MAAOA,EACPC,OAAQA,EACRC,SAAUA,EACVC,UAAWA,EACXC,SAAUA,MAEd,oCACE,cAAC,EAAD,MAEF,oCACE,cAAC,EAAD,CAAMwB,QAASA,EAAS6B,iBA/BL,WAErB,IADA,IAAIoD,EAAc,GACTC,EAAI,EAAGA,EAAI7G,EAAQ6G,IAC1BD,EAAYE,KAAKD,GAEnBzB,EAAWwB,IA0BmDrD,gBAxB1C,WACpBoC,EAAiBI,cAAcpF,OAAOC,SAAS+D,iBAAiBnD,MAAK,SAACyD,GACpEA,EAAMA,EAAIlB,KAAI,SAACO,GAAS,OAAOA,EAAI0B,cACnCZ,EAAWH,OAqBmF/E,UAAWA,UC9DhG6G,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBzF,MAAK,YAAkD,IAA/C0F,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.03b482a5.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useState } from 'react';\r\nimport { ethers } from \"ethers\";\r\nimport data from './data.json';\r\nimport \"./Mint.css\";\r\n\r\n\r\nfunction Mint({total, minted, data_url, image_url, free_sup}) {\r\n    const [cnt, setCnt] = useState(0);\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    const address = data.address;\r\n    const abi = data.abi;\r\n    \r\n    let mint_new = () => {\r\n        if (cnt === 0) return;\r\n        provider.send(\"eth_requestAccounts\", []).then(() =>\r\n        {\r\n            const signer = provider.getSigner();\r\n            let kitties = new ethers.Contract(address, abi);\r\n            kitties = kitties.connect(signer);\r\n            let price = 0.01;\r\n            let overrides = {\r\n                value: ethers.utils.parseEther((cnt * price).toString())\r\n            };\r\n            kitties.mint(cnt, overrides).catch((err) => alert(err.message));\r\n        });\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"Mint\">\r\n            <h3>Basic info:</h3>\r\n            <p>Minted/free/total: {minted} / {free_sup} / {total} </p>\r\n            <p>Metadata url: {data_url}</p> \r\n            <p>Image url: {image_url}</p>\r\n            <p>Contract Address: {data.address}</p>\r\n            <div>\r\n                <h3>Mint Kitties:</h3>\r\n                <p>Count:</p>\r\n                <input type=\"text\" value={cnt} onInput= {e => setCnt(e.target.value)} />\r\n                <input\r\n                type=\"button\"\r\n                value=\"Mint\"\r\n                onClick={mint_new}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Mint;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { ImageList } from '@material-ui/core';\r\nimport ImageListItem from '@material-ui/core/ImageListItem';\r\nimport { ImageListItemBar } from '@material-ui/core';\r\nimport './View.css';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n      justifyContent: 'space-around',\r\n      overflow: 'hidden',\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n    gridList: {\r\n      padding: 20,\r\n      width: 1000\r\n    }\r\n  }));\r\n\r\nfunction View({kitties, show_my_kitties, show_all_kitties, image_url}) {\r\n    \r\n    const classes = useStyles();\r\n    return (\r\n        <div className=\"View\">\r\n          <h3>Show Kitties:</h3>\r\n          <div>\r\n            <input\r\n                  type=\"button\"\r\n                  value=\"My kitties\"\r\n                  onClick={show_my_kitties}\r\n                  />\r\n            \r\n            <input\r\n                  type=\"button\"\r\n                  value=\"All kitties\"\r\n                  onClick={show_all_kitties}\r\n                  />\r\n          </div>\r\n          <p>{kitties.length === 0 ? \"Mint at least one kitty to show...\" : \"\"}</p>\r\n          <div className={classes.root}>\r\n            <ImageList cols={4} rowHeight={225}  gap={20} className={classes.gridList}>\r\n              {kitties.map((tile) => (\r\n                <ImageListItem key={tile}>\r\n                  <img src={\"https://arweave.net/\" + \"60Y_LV_957hWcDfLZQ56LcGRbLKHOgc4d4RnJf3nLho/\" + tile.toString() + \".png\"} />\r\n                  <ImageListItemBar\r\n                    title={\"Kitties #\" + tile.toString()}\r\n                  />\r\n                </ImageListItem>\r\n              ))}\r\n            </ImageList>\r\n          </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default View\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { ethers } from \"ethers\";\r\nimport data from './data.json';\r\nimport \"./Transfer.css\";\r\n\r\nfunction Transfer() {\r\n    const [idx, setIdx] = useState(0);\r\n    const [to_address, setToAddress] = useState(\"\");\r\n    \r\n    \r\n    let transfer = () => {\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const address = data.address;\r\n        const abi = data.abi;\r\n        provider.send(\"eth_requestAccounts\", []).then(() =>\r\n        {\r\n            const signer = provider.getSigner();\r\n            let kitties = new ethers.Contract(address, abi);\r\n            kitties = kitties.connect(signer);\r\n            kitties.transferFrom(window.ethereum.selectedAddress, to_address, idx).catch((err) => alert(err.message));\r\n        });\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"Transfer\">\r\n            <h3>Transfer Kitty:</h3>\r\n            <p>Receiver:</p>\r\n            <input type=\"idx\" value={to_address} onInput= {e => setToAddress(e.target.value)} />\r\n            <p>Kitty Id:</p>\r\n            <input type=\"idx\" value={idx} onInput= {e => setIdx(e.target.value)} />\r\n            <input\r\n            type=\"button\"\r\n            value=\"Transfer\"\r\n            onClick={transfer}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Transfer;\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { ethers } from \"ethers\";\r\nimport './CountDown.css';\r\n\r\nfunction CountDown({start_height}) {\r\n    let [current_heght, setCurrentHeight] = useState(0);\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    provider.getBlockNumber().then((res) => {setCurrentHeight(res)})\r\n    if (start_height > current_heght) {\r\n        return (\r\n            <div className=\"CountDown\">\r\n                <h3>Count down:</h3>\r\n                <p>{start_height - current_heght} Block to go, approximately {((start_height - current_heght) / 4).toFixed(1)} minites</p>\r\n            </div>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <div></div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CountDown\r\n","import { ethers } from \"ethers\";\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport Mint from './components/Mint';\nimport View from './components/View';\nimport Transfer from \"./components/Transfer\";\nimport CountDown from \"./components/CountDown\";\nimport data from './components/data.json';\n\nfunction App() {\n    const [kitties, setKitties] = useState([]);\n    const [total, setTotal] = useState(0);\n    const [minted, setMinted] = useState(0);\n    const [free_sup, setFreeSup] = useState(0);\n    const [start_height, setStartHeight] = useState(0);\n    const [data_url, setDataUrl] = useState(\"\");\n    const [image_url, setImageUrl] = useState(\"\");\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const address = data.address;\n    const abi = data.abi;\n    let kitties_contract = new ethers.Contract(address, abi, provider);\n\n    useEffect(() => {\n      const initData = async () => {\n        await window.ethereum.enable();\n        kitties_contract.walletOfOwner(window.ethereum.selectedAddress).then((res) => {\n            res = res.map((idx) => {return idx.toNumber()});\n            setKitties(res);\n          });\n          setMinted((await kitties_contract.totalSupply()).toNumber());\n          setFreeSup((await kitties_contract.getFreeSupply()).toNumber());\n          setDataUrl(await kitties_contract.getBaseURI());\n          setStartHeight(await kitties_contract.getSaleTime());\n          let base_url = await kitties_contract.getBaseURI();\n          setDataUrl(base_url)\n          let data = await fetch(\"https://arweave.net/\" + base_url.substring(5) + '0').then((res) => res.json());\n          setImageUrl(data.image.substring(0, data.image.length - 5));\n          setTotal((await kitties_contract.MAX_KITTIES()).toNumber());\n      }\n      \n      initData();\n    }, []);\n\n  let show_all_kitties = () => {\n    let all_kitties = [];\n    for (var i = 0; i < minted; i++) {\n      all_kitties.push(i);\n    };\n    setKitties(all_kitties);\n  };\n  let show_my_kitties = () => {\n    kitties_contract.walletOfOwner(window.ethereum.selectedAddress).then((res) => {\n      res = res.map((idx) => {return idx.toNumber()});\n      setKitties(res);\n    });\n  };\n\n  return (\n    <div>\n    <container>\n      <CountDown start_height={start_height}></CountDown>\n    </container>\n    <container>\n      <Mint \n        total={total} \n        minted={minted} \n        data_url={data_url}\n        image_url={image_url}\n        free_sup={free_sup}></Mint>\n    </container>\n    <container>\n      <Transfer></Transfer>\n    </container>\n    <container>\n      <View kitties={kitties} show_all_kitties={show_all_kitties} show_my_kitties={show_my_kitties} image_url={image_url}></View>\n    </container>\n  </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}